{
    "contents" : "#' A Bayesian Model Average object \n#' \n#' Object of class \\code{BMA} are created by the \\code{fitBMA}, \\code{summary} and \\code{plot} functions\n#'\n#' \n#' An object of the class `BMA' has the following slots:\n#' \\itemize{\n#' \\item \\code{Y} A depedent variable\n#' \\item \\code{X} Covariates\n#' \\item \\code{output} Output includes coefficients, R.squared, postOdds, postCoef, probSig\n#' }\n#'\n#' @author Taeyong Park: \\email{typark99@@gmail.com}\n#' @aliases BMA-class initialize,BMA-method getBMA,BMA-method \n#' @rdname BMA\n#' @export\nsetClass(Class=\"BMA\", \n         slot = list(\n           Y = \"matrix\", # Input\n           X = \"matrix\", # Input\n           output = \"list\" # Output: This will include the output from fitBMA() \n         ),\n         prototype = prototype(\n           Y = matrix(nrow=0, ncol=0), # An empty matrix\n           X = matrix(nrow=0, ncol=0), # An empty matrix\n           output = list() # An empty list\n         )\n)\n\n#' @export\nsetMethod(\"initialize\", \"BMA\", # We begin by initializing BMA class\n          function(.Object, ...){\n            value=callNextMethod()\n            return(value)\n          }\n) \n\n#' @rdname BMA\n#' @export \nsetGeneric(\"getBMA\", # setGeneric sets a generic function\n           function(object=\"BMA\")  {\n             standardGeneric(\"getBMA\")\n           }\n)\n\n#' @export\nsetMethod(f=\"getBMA\", # setMethod specifies the function getBMA()\n          signature=\"BMA\", \n          function(object){ \n            return(output=object@output)\n          }\n) ",
    "created" : 1395427000634.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2884140255",
    "id" : "ADBE59AC",
    "lastKnownWriteTime" : 1395428745,
    "path" : "~/GitHub/ProgrammingMidterm/bmaPack/R/BMA.R",
    "project_path" : "R/BMA.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}