setGeneric(name="fitBMA",  # setGeneric sets a generic function
def=function(Y, X, ...)
{standardGeneric("fitBMA")}
)
setMethod(f="fitBMA",  # setMethod specifies the function fitBMA()
definition=function(Y, X, g=3){ # g=3 is default
Y <- (Y-mean(Y))/sd(Y) # Standardize dependent variable
X <- (X-mean(X))/sd(X) # Standardize covariates
Z <- list()  # Z will contain every combination of X
coefficientsList <- list() # This will be transformed to coefficients which is a matrix
coefficients<-matrix(NA, ncol(X), ncol(X)) # We want the output of coefficients as a matrix; Since we will run regressions without constant, the output has the same number of rows and columns
R2 <- eBetaModel <- bayesF <- numeric() # Empty numerics for several statistics
for (i in 2:ncol(X)){ # The first elements are not looped to make it easy to create every combination of the covariates
Z[[1]] <- X[,1]
Z[[i]] <- cbind(X[,i],Z[[i-1]]) # This ensures that Z will contain every combination of the covariates
coefficientsList[[1]] <- summary(lm(Y ~ Z[[1]]-1))$coef[,1] # The first element for coefficient is not looped
coefficientsList[[i]] <- summary(lm(Y ~ Z[[i]]-1))$coef[,1] # We should run regressions with no constant
coefficients[1,] <- c(coefficientsList[[1]], rep(NA, ncol(X)-length(coefficientsList[[1]]))) # Now, we want to transform coef to the form of matrix
coefficients[i,] <- c(coefficientsList[[i]], rep(NA, ncol(X)-length(coefficientsList[[i]]))) # An empty cell will be expressed as "NA"
R2[1] <- summary(lm(Y ~ Z[[1]]-1))$r.squared # The first element for R2 is not looped
R2[i] <- summary(lm(Y ~ Z[[i]]-1))$r.squared # We should run regressions with no constant
}
for (k in 1:ncol(X)){
p=k
n=nrow(X)
bayesF[k] <- (1+g)^((n-p-1)/2)*(1+g*(1-R2[k]))^(-(n-1)/2) # This returns Bayes's factor for the models; This is the posterior model odds for each model
}
for (j in 1:ncol(X)){
eBetaModel[j] <- mean((g/(g+1))*coefficients[j:ncol(X),1]) # This returns E(\beta_j|M_k) from Slide 3
}
postModel <- bayesF/sum(bayesF) # Posterior probability of the model; The total weight assigned to all models that include each variable
postCoef <- postModel*eBetaModel # Posterior expected value of each coefficient
output <- list(coefficients, R2, bayesF, postCoef, postModel)
names(output) <- c("coefficients", "R.squared", "postOdds", "postCoef", "probSig")
return((new("BMA", Y=Y, X=X, output=output)))
}
)
getBMA(fitBMA(myY, myX))
setMethod(f="print",  # Since print is a built-in function we do not set a generic function, and define the print function used under the Regressions class
signature="BMA",
definition=function(x){
cat("*** Start Summary (Class-BMA) ***", "\n", "\n")
cat("1) Posterior expected value of each coefficient", "\n")
for(i in 1:nrow(x@output$coefficients)){
cat("Model", i, ":", x@output$postCoef[i,], "\n") # Of the output of fitBMA(), postCoef indicates the posterior expected value of each coefficient
}
cat("2) The posterior probability that the coefficient is non-zero", "\n")
for(i in 1:nrow(x@output$coefficients)){ # for loop enables to separate each model
cat("Model", i, ":", x@output$probSig[i], "\n") # Of the output of fitBMA(), probSig indicates The posterior probability that the coefficient is non-zero
}
cat("\n","**** End Summary (Class-BMA) ****")
}
)
print(fitBMA(myY, myX))
setMethod(f="print",  # Since print is a built-in function we do not set a generic function, and define the print function used under the Regressions class
signature="BMA",
definition=function(x){
cat("*** Start Summary (Class-BMA) ***", "\n", "\n")
cat("1) Posterior expected value of each coefficient", "\n")
for(i in 1:length(x@output$postCoef)){
cat("Model", i, ":", x@output$postCoef[i], "\n") # Of the output of fitBMA(), postCoef indicates the posterior expected value of each coefficient
}
cat("2) The posterior probability that the coefficient is non-zero", "\n")
for(i in 1:length(x@output$probSig)){ # for loop enables to separate each model
cat("Model", i, ":", x@output$probSig[i], "\n") # Of the output of fitBMA(), probSig indicates The posterior probability that the coefficient is non-zero
}
cat("\n","**** End Summary (Class-BMA) ****")
}
)
print(fitBMA(myY, myX))
setMethod(f="print",  # Since print is a built-in function we do not set a generic function, and define the print function used under the Regressions class
signature="BMA",
definition=function(x){
cat("*** Start Summary (Class-BMA) ***", "\n", "\n")
cat("1) Posterior expected value of each coefficient", "\n")
for(i in 1:length(x@output$postCoef)){
cat("Coefficient", i, ":", x@output$postCoef[i], "\n") # Of the output of fitBMA(), postCoef indicates the posterior expected value of each coefficient
}
cat("2) The posterior probability that the coefficient is non-zero", "\n")
for(i in 1:length(x@output$probSig)){ # for loop enables to separate each model
cat("Coefficient", i, ":", x@output$probSig[i], "\n") # Of the output of fitBMA(), probSig indicates The posterior probability that the coefficient is non-zero
}
cat("\n","**** End Summary (Class-BMA) ****")
}
)
print(fitBMA(myY, myX))
setMethod(f="print",  # Since print is a built-in function we do not set a generic function, and define the print function used under the Regressions class
signature="BMA",
definition=function(x){
cat("*** Start Summary (Class-BMA) ***", "\n", "\n")
cat("1) Posterior expected value of each coefficient", "\n")
for(i in 1:length(x@output$postCoef)){
cat("Coefficient", i, ":", x@output$postCoef[i], "\n" "\n") # Of the output of fitBMA(), postCoef indicates the posterior expected value of each coefficient
}
cat("2) Posterior probability that the coefficient is non-zero", "\n")
for(i in 1:length(x@output$probSig)){ # for loop enables to separate each model
cat("Coefficient", i, ":", x@output$probSig[i], "\n", "\n") # Of the output of fitBMA(), probSig indicates The posterior probability that the coefficient is non-zero
}
cat("**** End Summary (Class-BMA) ****")
}
)
setMethod(f="print",  # Since print is a built-in function we do not set a generic function, and define the print function used under the Regressions class
signature="BMA",
definition=function(x){
cat("*** Start Summary (Class-BMA) ***", "\n", "\n")
cat("1) Posterior expected value of each coefficient", "\n")
for(i in 1:length(x@output$postCoef)){
cat("Coefficient", i, ":", x@output$postCoef[i], "\n", "\n") # Of the output of fitBMA(), postCoef indicates the posterior expected value of each coefficient
}
cat("2) The posterior probability that the coefficient is non-zero", "\n")
for(i in 1:length(x@output$probSig)){ # for loop enables to separate each model
cat("Coefficient", i, ":", x@output$probSig[i], "\n") # Of the output of fitBMA(), probSig indicates The posterior probability that the coefficient is non-zero
}
cat("**** End Summary (Class-BMA) ****")
}
)
setMethod(f="print",  # Since print is a built-in function we do not set a generic function, and define the print function used under the Regressions class
signature="BMA",
definition=function(x){
cat("*** Start Summary (Class-BMA) ***", "\n", "\n")
cat("1) Posterior expected value of each coefficient", "\n")
for(i in 1:length(x@output$postCoef)){
cat("Coefficient", i, ":", x@output$postCoef[i], "\n", "\n") # Of the output of fitBMA(), postCoef indicates the posterior expected value of each coefficient
}
cat("2) The posterior probability that the coefficient is non-zero", "\n")
for(i in 1:length(x@output$probSig)){ # for loop enables to separate each model
cat("Coefficient", i, ":", x@output$probSig[i], "\n", "\n") # Of the output of fitBMA(), probSig indicates The posterior probability that the coefficient is non-zero
}
cat("**** End Summary (Class-BMA) ****")
}
)
setMethod(f="print",  # Since print is a built-in function we do not set a generic function, and define the print function used under the Regressions class
signature="BMA",
definition=function(x){
cat("*** Start Summary (Class-BMA) ***", "\n", "\n")
cat("1) Posterior expected value of each coefficient", "\n")
for(i in 1:length(x@output$postCoef)){
cat("Coefficient", i, ":", x@output$postCoef[i], "\n", "\n") # Of the output of fitBMA(), postCoef indicates the posterior expected value of each coefficient
}
cat("2) Posterior probability that the coefficient is non-zero", "\n")
for(i in 1:length(x@output$probSig)){ # for loop enables to separate each model
cat("Coefficient", i, ":", x@output$probSig[i], "\n", "\n") # Of the output of fitBMA(), probSig indicates The posterior probability that the coefficient is non-zero
}
cat("**** End Summary (Class-BMA) ****")
}
)
print(fitBMA(myY, myX))
setMethod(f="print",  # Since print is a built-in function we do not set a generic function, and define the print function used under the Regressions class
signature="BMA",
definition=function(x){
cat("*** Start Summary (Class-BMA) ***", "\n", "\n")
cat("1) Posterior expected value of each coefficient", "\n")
for(i in 1:length(x@output$postCoef)){
cat("Coefficient", i, ":", x@output$postCoef[i], "\n") # Of the output of fitBMA(), postCoef indicates the posterior expected value of each coefficient
}
cat("\n", "2) Posterior probability that the coefficient is non-zero", "\n")
for(i in 1:length(x@output$probSig)){ # for loop enables to separate each model
cat("Coefficient", i, ":", x@output$probSig[i], "\n") # Of the output of fitBMA(), probSig indicates The posterior probability that the coefficient is non-zero
}
cat("\n","**** End Summary (Class-BMA) ****")
}
)
print(fitBMA(myY, myX))
setMethod(f="print",  # Since print is a built-in function we do not set a generic function, and define the print function used under the Regressions class
signature="BMA",
definition=function(x){
cat("*** Start Summary (Class-BMA) ***", "\n", "\n")
cat("1) Posterior expected value of each coefficient", "\n")
for(i in 1:length(x@output$postCoef)){
cat("Coefficient", i, ":", x@output$postCoef[i], "\n") # Of the output of fitBMA(), postCoef indicates the posterior expected value of each coefficient
}
cat("\n", "2) Posterior probability that the coefficient is non-zero", "\n", sep="")
for(i in 1:length(x@output$probSig)){ # for loop enables to separate each model
cat("Coefficient", i, ":", x@output$probSig[i], "\n") # Of the output of fitBMA(), probSig indicates The posterior probability that the coefficient is non-zero
}
cat("\n","**** End Summary (Class-BMA) ****")
}
)
print(fitBMA(myY, myX))
setMethod(f="print",  # Since print is a built-in function we do not set a generic function, and define the print function used under the Regressions class
signature="BMA",
definition=function(x){
cat("*** Start Summary (Class-BMA) ***", "\n", "\n")
cat("1) Posterior expected value of each coefficient", "\n")
for(i in 1:length(x@output$postCoef)){
cat("Coefficient", i, ":", x@output$postCoef[i], "\n") # Of the output of fitBMA(), postCoef indicates the posterior expected value of each coefficient
}
cat("\n", "2) Posterior probability that the coefficient is non-zero", "\n", sep="")
for(i in 1:length(x@output$probSig)){ # for loop enables to separate each model
cat("Coefficient", i, ":", x@output$probSig[i], "\n") # Of the output of fitBMA(), probSig indicates The posterior probability that the coefficient is non-zero
}
cat("\n","**** End Summary (Class-BMA) ****", sep="")
}
)
summary(fitBMA(myY, myX))
setMethod(f="summary",  # Since print is a built-in function we do not set a generic function, and define the print function used under the Regressions class
signature="BMA",
definition=function(x){
cat("*** Start Summary (Class-BMA) ***", "\n", "\n")
cat("1) Posterior expected value of each coefficient", "\n")
for(i in 1:length(x@output$postCoef)){
cat("Coefficient", i, ":", x@output$postCoef[i], "\n") # Of the output of fitBMA(), postCoef indicates the posterior expected value of each coefficient
}
cat("\n", "2) Posterior probability that the coefficient is non-zero", "\n", sep="")
for(i in 1:length(x@output$probSig)){ # for loop enables to separate each model
cat("Coefficient", i, ":", x@output$probSig[i], "\n") # Of the output of fitBMA(), probSig indicates The posterior probability that the coefficient is non-zero
}
cat("\n","**** End Summary (Class-BMA) ****", sep="")
}
)
setMethod(f="summary",  # Since print is a built-in function we do not set a generic function, and define the print function used under the Regressions class
signature="BMA",
definition=function(object){
cat("*** Start Summary (Class-BMA) ***", "\n", "\n")
cat("1) Posterior expected value of each coefficient", "\n")
for(i in 1:length(object@output$postCoef)){
cat("Coefficient", i, ":", object@output$postCoef[i], "\n") # Of the output of fitBMA(), postCoef indicates the posterior expected value of each coefficient
}
cat("\n", "2) Posterior probability that the coefficient is non-zero", "\n", sep="")
for(i in 1:length(object@output$probSig)){ # for loop enables to separate each model
cat("Coefficient", i, ":", object@output$probSig[i], "\n") # Of the output of fitBMA(), probSig indicates The posterior probability that the coefficient is non-zero
}
cat("\n","**** End Summary (Class-BMA) ****", sep="")
}
)
summary(fitBMA(myY,myX))
setMethod(f="summary",  # Since print is a built-in function we do not set a generic function, and define the print function used under the Regressions class
signature="BMA",
definition=function(object){
cat("*** Start Summary (Class-BMA) ***", "\n", "\n")
cat("1) Posterior expected value of each coefficient", "\n")
for(i in 1:length(object@output$postCoef)){
cat("Coefficient", i, ":", round(object@output$postCoef[i],4), "\n") # Of the output of fitBMA(), postCoef indicates the posterior expected value of each coefficient
}
cat("\n", "2) Posterior probability that the coefficient is non-zero", "\n", sep="")
for(i in 1:length(object@output$probSig)){ # for loop enables to separate each model
cat("Coefficient", i, ":", round(object@output$probSig[i],4), "\n") # Of the output of fitBMA(), probSig indicates The posterior probability that the coefficient is non-zero
}
cat("\n","**** End Summary (Class-BMA) ****", sep="")
}
)
summary(fitBMA(myY,myX))
lapply(c("doMC", "multicore", "foreach"),
require, character.only=TRUE)
setMethod(f="plot",   # Since a generic function for plot is available, we do not set a generic function
signature="BMA", # Clarify BMA class
definition=function(x){
plot(1:length(x@output$postCoef), x@output$postCoef, # This will plot the value of r.squared for each model
pch="+", col="darkgreen", cex=1.5,
xlim=c(0.5, length(x@output$postCoef)+0.5), # This is just for a better-looking
xlab="Coefficients", ylab="Posterior expected value",
main="The posterior expected value of coefficient")
}
)
plot(fitBMA(myY, myX))
setMethod(f="plot",   # Since a generic function for plot is available, we do not set a generic function
signature="BMA", # Clarify BMA class
definition=function(x){
plot(1:length(x@output$postCoef), x@output$postCoef, # This will plot the value of r.squared for each model
pch="+", col="darkgreen", cex=1.5,
xlim=c(0.5, length(x@output$postCoef)+0.5), # This is just for a better-looking
xlab="Coefficients \exp{\beta}", ylab="Posterior expected value",
main="The posterior expected value of coefficient")
}
)
setMethod(f="plot",   # Since a generic function for plot is available, we do not set a generic function
signature="BMA", # Clarify BMA class
definition=function(x){
plot(1:length(x@output$postCoef), x@output$postCoef, # This will plot the value of r.squared for each model
pch="+", col="darkgreen", cex=1.5,
xlim=c(0.5, length(x@output$postCoef)+0.5), # This is just for a better-looking
xlab="Coefficients exp{\beta}", ylab="Posterior expected value",
main="The posterior expected value of coefficient")
}
)
plot(fitBMA(myY, myX))
setMethod(f="plot",   # Since a generic function for plot is available, we do not set a generic function
signature="BMA", # Clarify BMA class
definition=function(x){
plot(1:length(x@output$postCoef), x@output$postCoef, # This will plot the value of r.squared for each model
pch="+", col="darkgreen", cex=1.5,
xlim=c(0.5, length(x@output$postCoef)+0.5), # This is just for a better-looking
xlab="Coefficients expression(\beta)", ylab="Posterior expected value",
main="The posterior expected value of coefficient")
}
)
plot(fitBMA(myY, myX))
setMethod(f="plot",   # Since a generic function for plot is available, we do not set a generic function
signature="BMA", # Clarify BMA class
definition=function(x){
plot(1:length(x@output$postCoef), x@output$postCoef, # This will plot the value of r.squared for each model
pch="+", col="darkgreen", cex=1.5,
xlim=c(0.5, length(x@output$postCoef)+0.5), # This is just for a better-looking
xlab="Coefficients bquote(\beta)", ylab="Posterior expected value",
main="The posterior expected value of coefficient")
}
)
plot(fitBMA(myY, myX))
setMethod(f="plot",   # Since a generic function for plot is available, we do not set a generic function
signature="BMA", # Clarify BMA class
definition=function(x){
plot(1:length(x@output$postCoef), x@output$postCoef, # This will plot the value of r.squared for each model
pch="+", col="darkgreen", cex=1.5,
xlim=c(0.5, length(x@output$postCoef)+0.5), # This is just for a better-looking
xlab="Coefficients quote(\beta)", ylab="Posterior expected value",
main="The posterior expected value of coefficient")
}
)
plot(fitBMA(myY, myX))
setMethod(f="plot",   # Since a generic function for plot is available, we do not set a generic function
signature="BMA", # Clarify BMA class
definition=function(x){
plot(1:length(x@output$postCoef), x@output$postCoef, # This will plot the value of r.squared for each model
pch="+", col="darkgreen", cex=1.5,
xlim=c(0.5, length(x@output$postCoef)+0.5), # This is just for a better-looking
xlab=expression(\beta), ylab="Posterior expected value",
main="The posterior expected value of coefficient")
}
)
setMethod(f="plot",   # Since a generic function for plot is available, we do not set a generic function
signature="BMA", # Clarify BMA class
definition=function(x){
plot(1:length(x@output$postCoef), x@output$postCoef, # This will plot the value of r.squared for each model
pch="+", col="darkgreen", cex=1.5,
xlim=c(0.5, length(x@output$postCoef)+0.5), # This is just for a better-looking
xlab="Coefficient", ylab="Posterior expected value",
main="The posterior expected value of coefficient")
}
)
plot(fitBMA(myY, myX))
setMethod(f="plot",   # Since a generic function for plot is available, we do not set a generic function
signature="BMA", # Clarify BMA class
definition=function(x){
plot(1:length(x@output$postCoef), x@output$postCoef, # This will plot the value of r.squared for each model
pch="+", col="darkred", cex=2,
xlim=c(0.5, length(x@output$postCoef)+0.5), # This is just for a better-looking
xlab="Coefficient", ylab="Posterior expected value",
main="The posterior expected value of coefficient")
}
)
plot(fitBMA(myY, myX))
setMethod(f="plot",   # Since a generic function for plot is available, we do not set a generic function
signature="BMA", # Clarify BMA class
definition=function(x){
plot(1:length(x@output$postCoef), x@output$postCoef, # This will plot the value of r.squared for each model
pch="+", col="darkred", cex=2,
xlim=c(0.5, length(x@output$postCoef)+0.5), # This is just for a better-looking
ylim=c(min(x@output$postCoef), max(x@output$postCoef))
xlab="Coefficient", ylab="Posterior expected value",
main="The posterior expected value of coefficient")
}
)
setMethod(f="plot",   # Since a generic function for plot is available, we do not set a generic function
signature="BMA", # Clarify BMA class
definition=function(x){
plot(1:length(x@output$postCoef), x@output$postCoef, # This will plot the value of r.squared for each model
pch="+", col="darkred", cex=2,
xlim=c(0.5, length(x@output$postCoef)+0.5), # This is just for a better-looking
ylim=c(min(x@output$postCoef), max(x@output$postCoef)),
xlab="Coefficient", ylab="Posterior expected value",
main="The posterior expected value of coefficient")
}
)
plot(fitBMA(myY, myX))
setMethod(f="plot",   # Since a generic function for plot is available, we do not set a generic function
signature="BMA", # Clarify BMA class
definition=function(x){
plot(1:length(x@output$postCoef), x@output$postCoef, # This will plot the value of r.squared for each model
pch="+", col="darkred", cex=2,
xlim=c(0.5, length(x@output$postCoef)+0.5), # This is just for a better-looking
ylim=c(0.9*min(x@output$postCoef), 1.1*max(x@output$postCoef)),
xlab="Coefficient", ylab="Posterior expected value",
main="The posterior expected value of coefficient")
}
)
plot(fitBMA(myY, myX))
setMethod(f="plot",   # Since a generic function for plot is available, we do not set a generic function
signature="BMA", # Clarify BMA class
definition=function(x){
plot(1:length(x@output$postCoef), x@output$postCoef, # This will plot the value of r.squared for each model
pch="+", col="darkred", cex=2,
xlim=c(0.5, length(x@output$postCoef)+0.5), # This is just for a better-looking
ylim=c(0.7*min(x@output$postCoef), 1.2*max(x@output$postCoef)),
xlab="Coefficient", ylab="Posterior expected value",
main="The posterior expected value of coefficient")
}
)
plot(fitBMA(myY, myX))
setMethod(f="plot",   # Since a generic function for plot is available, we do not set a generic function
signature="BMA", # Clarify BMA class
definition=function(x){
plot(1:length(x@output$postCoef), x@output$postCoef, # This will plot the value of r.squared for each model
pch="+", col="darkred", cex=2,
xlim=c(0.5, length(x@output$postCoef)+0.5), # This is just for a better-looking
ylim=c(min(x@output$postCoef), 1.2*max(x@output$postCoef)),
xlab="Coefficient", ylab="Posterior expected value",
main="The posterior expected value of coefficient")
}
)
plot(fitBMA(myY, myX))
plot(1:length(x@output$probSig), x@output$probSig, # This will plot probSig for each coefficient
pch=".", col="darkred", cex=1,
xlim=c(0.5, length(x@output$probSig)+0.5), # This is just for a better-looking
xlab="Coefficient", ylab="Posterior expected value",
main="The posterior probability of non-zero coefficient")
setMethod(f="plot",   # Since a generic function for plot is available, we do not set a generic function
signature="BMA", # Clarify BMA class
definition=function(x){
par(mfrow=c(1,2))
plot(1:length(x@output$postCoef), x@output$postCoef, # This will plot postCoef for each coefficient
pch="+", col="darkred", cex=2,
xlim=c(0.5, length(x@output$postCoef)+0.5), # This is just for a better-looking
xlab="Coefficient", ylab="Posterior expected value",
main="The posterior expected value of coefficient")
plot(1:length(x@output$probSig), x@output$probSig, # This will plot probSig for each coefficient
pch=".", col="darkred", cex=1,
xlim=c(0.5, length(x@output$probSig)+0.5), # This is just for a better-looking
xlab="Coefficient", ylab="Posterior expected value",
main="The posterior probability of non-zero coefficient")
lines(1:length(x@output$probSig), x@output$probSig)
}
)
plot(fitBMA(myY, myX))
setMethod(f="plot",   # Since a generic function for plot is available, we do not set a generic function
signature="BMA", # Clarify BMA class
definition=function(x){
par(mfrow=c(1,2))
plot(1:length(x@output$postCoef), x@output$postCoef, # This will plot postCoef for each coefficient
pch="+", col="darkred", cex=2,
xlim=c(0.5, length(x@output$postCoef)+0.5), # This is just for a better-looking
xlab="Coefficient", ylab="Posterior expected value",
main="The posterior expected value of coefficient")
plot(1:length(x@output$probSig), x@output$probSig, # This will plot probSig for each coefficient
pch=".", col="darkred", cex=1,
xlim=c(0.5, length(x@output$probSig)+0.5), # This is just for a better-looking
xlab="Coefficient", ylab="Posterior expected value",
main="The posterior probability of non-zero coefficient")
abline(1:length(x@output$probSig), x@output$probSig)
}
)
plot(fitBMA(myY, myX))
setMethod(f="plot",   # Since a generic function for plot is available, we do not set a generic function
signature="BMA", # Clarify BMA class
definition=function(x){
par(mfrow=c(1,2))
plot(1:length(x@output$postCoef), x@output$postCoef, # This will plot postCoef for each coefficient
pch="+", col="darkred", cex=2,
xlim=c(0.5, length(x@output$postCoef)+0.5), # This is just for a better-looking
xlab="Coefficient", ylab="Posterior expected value",
main="The posterior expected value of coefficient")
plot(1:length(x@output$probSig), x@output$probSig, # This will plot probSig for each coefficient
pch=".", col="darkred", cex=1,
xlim=c(0.5, length(x@output$probSig)+0.5), # This is just for a better-looking
xlab="Coefficient", ylab="Posterior expected value",
main="The posterior probability of non-zero coefficient")
abline(v=x@output$probSig)
}
)
plot(fitBMA(myY, myX))
setMethod(f="plot",   # Since a generic function for plot is available, we do not set a generic function
signature="BMA", # Clarify BMA class
definition=function(x){
par(mfrow=c(1,2))
plot(1:length(x@output$postCoef), x@output$postCoef, # This will plot postCoef for each coefficient
pch="+", col="darkred", cex=2,
xlim=c(0.5, length(x@output$postCoef)+0.5), # This is just for a better-looking
xlab="Coefficient", ylab="Posterior expected value",
main="The posterior expected value \n of coefficient")
plot(1:length(x@output$probSig), x@output$probSig, # This will plot probSig for each coefficient
pch=".", col="darkred", cex=1,
xlim=c(0.5, length(x@output$probSig)+0.5), # This is just for a better-looking
xlab="Coefficient", ylab="Probability",
main="The posterior probability \n of non-zero coefficient")
}
)
plot(fitBMA(myY, myX))
setMethod(f="plot",   # Since a generic function for plot is available, we do not set a generic function
signature="BMA", # Clarify BMA class
definition=function(x){
par(mfrow=c(1,2))
plot(1:length(x@output$postCoef), x@output$postCoef, # This will plot postCoef for each coefficient
pch="+", col="darkred", cex=2,
xlim=c(0.5, length(x@output$postCoef)+0.5), # This is just for a better-looking
xlab="Coefficient", ylab="Posterior expected value",
main="The posterior expected value \n of coefficient")
plot(1:length(x@output$probSig), x@output$probSig, # This will plot probSig for each coefficient
pch="+", col="darkred", cex=2,
xlim=c(0.5, length(x@output$probSig)+0.5), # This is just for a better-looking
xlab="Coefficient", ylab="Probability",
main="The posterior probability \n of non-zero coefficient")
}
)
plot(fitBMA(myY, myX))
library(devtools)
library(roxygen2)
setwd("~/GitHub/ProgrammingMidterm") # Set my working directory
sd(myX)
myX
names(myX
)
